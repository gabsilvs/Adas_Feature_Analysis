# -*- coding: utf-8 -*-
"""ADAS Feature Impact Analysis.ipynb

Automatically generated by Colab.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, roc_auc_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBRegressor
from contextlib import nullcontext

file_path = "Original file.xlsx"

cars_table = pd.read_excel (file_path, sheet_name='CarsTable')
plate_table = pd.read_excel (file_path, sheet_name='PLATES FULLV2')

print(cars_table.columns)
print(plate_table.columns)

plate_table = plate_table.drop(columns=['Unnamed: 5',
       'Unnamed: 6', 'Unnamed: 7', 'Unnamed: 8', 'Unnamed: 9', 'Unnamed: 10',
       'Unnamed: 11', 'Unnamed: 12'])
print(plate_table.columns)

from google.colab import drive
drive.mount('/content/drive')

cars_table = cars_table.loc[:, ~cars_table.columns.str.contains('^Unnamed')]
plate_table = plate_table.loc[:, ~plate_table.columns.str.contains('^Unnamed')]
plate_table = plate_table.replace(r'^\s*$', None, regex=True)
cars_table = cars_table.replace(r'^\s*$', None, regex=True)

plate_table = plate_table.dropna(axis=1, how='all')

merged_data = pd.merge(cars_table, plate_table, how="inner", left_on="VEHICLE", right_on="VEHICLE")

print("Merged Data Shape:", merged_data.shape)
print(merged_data.columns)

import seaborn as sns
import matplotlib.pyplot as plt

adas_features = ['AEB (Advanced emergency braking)',
       'PEB (Pedestrian emergency braking)', 'FCW (Foward collision warning)',
       'LDW (Lane departure warning)', 'LKA (Lane keep assistance)',
       'SBR (Seat belt reminder)', 'BSM (blind spot monitor)',
       'ACC (Adaptative cruise control)', 'RPC (Rear cross path detection)',
       'TSR (Trafic sign recognition)', 'Detector de fadiga']

correlation_data = merged_data[adas_features + ["PLATES"]].apply(pd.to_numeric, errors='coerce').corr()

merged_data.replace({"O": 1, 'X': 0}, inplace=True)

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='most_frequent')
y_imputed = imputer.fit_transform(merged_data[["PLATES"]])
merged_data["PLATES"] = y_imputed



features = ['AEB (Advanced emergency braking)',
       'PEB (Pedestrian emergency braking)', 'FCW (Foward collision warning)',
       'LDW (Lane departure warning)', 'LKA (Lane keep assistance)',
       'SBR (Seat belt reminder)', 'BSM (blind spot monitor)',
       'ACC (Adaptative cruise control)', 'RPC (Rear cross path detection)',
       'TSR (Trafic sign recognition)', 'Detector de fadiga']  # Ajuste conforme necess√°rio
X = merged_data[features]
y = merged_data["PLATES"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

importances = model.feature_importances_
plt.figure(figsize=(8, 6))
sns.barplot(x=importances, y=features)
plt.title("Feature Importance for Predicting Sales")
plt.show()

for feature in adas_features:
    percentage = (merged_data[feature].sum() / len(merged_data)) * 100
    print(f"Percentage of vehicles with {feature}: {percentage:.2f}%")

adas = 'FCW (Foward collision warning)'
grouped = merged_data.groupby(adas)['PLATES'].sum()

if 0 in grouped and 1 in grouped:
    plates_with_choosen = grouped[1]
    plates_without_choosen = grouped[0]

    percentage_increase = ((plates_with_choosen - plates_without_choosen) / plates_without_choosen) * 100
    percentage_increase = abs(percentage_increase)
    print(f"Percentage increase in plates with {adas}: {percentage_increase:.2f}%")
else:
    print("Data does not include both groups (with and without AEB).")

percentage_increases = {}

for feature in adas_features:

    grouped = merged_data.groupby(feature)['PLATES'].sum()

    # Calculate percentage increase
    if 0 in grouped and 1 in grouped:
        plates_with_feature = grouped[1]
        plates_without_feature = grouped[0]

        percentage_increase = ((plates_with_feature - plates_without_feature) / plates_without_feature) * 100
        percentage_increases[feature] = percentage_increase
    else:
        percentage_increases[feature] = None  # Handle cases where both groups don't exist
        print(f"Data does not include both groups (with and without {feature}).")

filtered_results = {feature: increase for feature, increase in percentage_increases.items() if increase is not None}

# Plot
plt.figure(figsize=(8, 6))
plt.bar(filtered_results.keys(), filtered_results.values(), color='skyblue')
plt.title("Percentage Increase in Plates with ADAS Features")
plt.ylabel("Percentage Increase")
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()  # Adjust layout to prevent labels from overlapping
plt.show()